import t from"isomorphic-unfetch";function r(){return r=Object.assign?Object.assign.bind():function(t){for(var r=1;r<arguments.length;r++){var s=arguments[r];for(var e in s)Object.prototype.hasOwnProperty.call(s,e)&&(t[e]=s[e])}return t},r.apply(this,arguments)}class s{constructor(t){this.apiKey=void 0,this.baseUrl=void 0,this.apiKey=t.apiKey,this.baseUrl=t.baseUrl||"https://jsonplaceholder.typicode.com"}request(s,e){const i=`${this.baseUrl}${s}`,o=r({},e,{headers:{"Content-Type":"application/json","api-key":this.apiKey}});return t(i,o).then(t=>{if(t.ok)return t.json();throw new Error(t.statusText)})}}class e extends s{constructor(t){super(t),this.config=void 0,this.config=t}getPath(){return this.config}}class i{constructor(t){this.pathFinder=void 0,this.pathFinder=new e(t)}}export{i as Library};
