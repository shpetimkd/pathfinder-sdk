import e from"isomorphic-unfetch";import t from"axios";function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var r in o)Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}return e},o.apply(this,arguments)}class r{constructor(e){this.apiKey=void 0,this.baseUrl=void 0,this.apiKey=e.apiKey,this.baseUrl=e.baseUrl||"https://jsonplaceholder.typicode.com"}request(t,r){const a=`${this.baseUrl}${t}`,s=o({},r,{headers:{"Content-Type":"application/json","api-key":this.apiKey}});return e(a,s).then(e=>{if(e.ok)return e.json();throw new Error(e.statusText)})}}class a extends r{getPath(){t.get("http://localhost:4000/status",{headers:{Cookie:"cookie1=value; cookie2=value; cookie3=value;"}}).then(e=>{console.log(e)})}async fetchData(e,o){try{return(await t.get(`http://localhost:4000/${e}`,{headers:{Authorization:"Bearer somebearertoken",Cookie:"cookie1=value; cookie2=value; cookie3=value;"}})).data}catch(e){throw console.error("Error fetching data:",e),e}}}class s{constructor(e){this.pathFinder=void 0,this.pathFinder=new a(e)}}export{s as Library};
