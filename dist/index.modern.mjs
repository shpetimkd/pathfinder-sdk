import t from"isomorphic-unfetch";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(t[r]=s[r])}return t},e.apply(this,arguments)}class s{constructor(t){this.apiKey=void 0,this.baseUrl=void 0,this.apiKey=t.apiKey,this.baseUrl=t.baseUrl||"https://jsonplaceholder.typicode.com"}request(s,r){const n=`${this.baseUrl}${s}`,i=e({},r,{headers:{"Content-Type":"application/json","api-key":this.apiKey}});return t(n,i).then(t=>{if(t.ok)return t.json();throw new Error(t.statusText)})}}class r extends s{getPath(){return fetch("http://localhost:4000/status",{credentials:"include"}).then(t=>t.json())}}class n{constructor(t){this.pathFinder=void 0,this.pathFinder=new r(t)}}export{n as Library};
