{"code":"import axios from 'axios';\nexport class Base {\n    baseUrl;\n    apiKey;\n    constructor(config) {\n        this.baseUrl = config.baseUrl;\n        this.apiKey = config.apiKey;\n    }\n    async get(path, token) {\n        const url = `${this.baseUrl}${path}`;\n        return await axios\n            .get(url, {\n            headers: {\n                'Content-Type': 'application/json',\n                'api-key': this.apiKey,\n                Cookie: token,\n            },\n        })\n            .then((response) => {\n            if ([200, 201, 204].includes(response.status)) {\n                return response;\n            }\n            throw new Error(response.statusText);\n        });\n    }\n}\n","references":["/Users/shpetimkadrija/Documents/Shpetim/Develop/AERDF/sdk/node_modules/axios/index.d.ts"],"dts":{"name":"/Users/shpetimkadrija/Documents/Shpetim/Develop/AERDF/sdk/dist/resources/base.d.ts","writeByteOrderMark":false,"text":"import { AxiosResponse } from 'axios';\ntype Config = {\n    apiKey: string;\n    baseUrl?: string;\n};\nexport declare abstract class Base {\n    private baseUrl;\n    private apiKey;\n    constructor(config: Config);\n    get<T>(path: string, token?: string): Promise<AxiosResponse<any, any> | Awaited<T>>;\n}\nexport {};\n"}}
